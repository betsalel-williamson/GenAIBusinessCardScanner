# This workflow runs CI for both Python and Node.js stacks in parallel.
name: Monorepo CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  python-ci:
    name: "Python CI"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python/UV
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          python-version-file: ".python-version"

      - name: Install the project
        run: uv sync --project data_orchestrator.py/dagster_project --all-extras --dev

      - name: Install dependencies and add venv to PATH
        run: |
          source data_orchestrator.py/dagster_project/.venv/bin/activate
          echo "$PWD/data_orchestrator.py/dagster_project/.venv/bin" >> $GITHUB_PATH

      - name: DBT | Build from sample data for CI
        # This step runs from the dbt_project directory to correctly resolve local paths.
        working-directory: ./data_orchestrator.py/dbt_project
        run: |
          dbt build --vars '{is_ci_run: true}'

      - name: Python | Lint with flake8
        run: bash data_orchestrator.py/dagster_project/lint.sh

      - name: Python | Test with coverage
        # Provide dummy environment variables for CI to allow Dagster resources to initialize.
        env:
          GOOGLE_API_KEY: "ci_test_key"
          MODEL_NAME: "ci_test_model"
        run: bash data_orchestrator.py/dagster_project/test.sh

      - name: Upload Python Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: python-coverage-report
          path: "./data_orchestrator.py/dagster_project/coverage.xml"

      - name: Report Python test results
        if: success() || failure()
        uses: dorny/test-reporter@v2
        with:
          name: Python Test Results
          path: "./data_orchestrator.py/dagster_project/pytest-report.xml"
          reporter: "java-junit" # Use the JUnit reporter for the XML format
          fail-on-error: true

      - name: Report Python Coverage Summary
        if: success() || failure()
        run: |
          # Extract the total coverage percentage from the text report
          TOTAL_COVERAGE_PERCENT=$(coverage report | tail -n 1 | awk '{print $NF}' | tr -d '%')

          # Determine the color for the badge based on coverage percentage
          COLOR="red"
          if [ "$TOTAL_COVERAGE_PERCENT" -ge 70 ]; then
            COLOR="success"
          elif [ "$TOTAL_COVERAGE_PERCENT" -ge 60 ]; then
            COLOR="yellow"
          fi

          # Construct the badge URL. The '%' must be URL-encoded as '%25'.
          BADGE_URL="https://img.shields.io/badge/coverage-${TOTAL_COVERAGE_PERCENT}%25-${COLOR}"
          BADGE_MARKDOWN="![Coverage]($BADGE_URL)"

          # Write the complete summary to the GitHub step summary file
          {
            echo "### Python Code Coverage"
            echo ""
            echo "$BADGE_MARKDOWN"
            echo ""
            echo "<details><summary>Expand for full report</summary>"
            echo ""
            # Append the full markdown report inside the details tag
            coverage report --format=markdown
            echo ""
            echo "</details>"
          } >> "$GITHUB_STEP_SUMMARY"

  node-ci:
    name: "Node.js CI"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
      pull-requests: write
    defaults:
      run:
        working-directory: ./validation_tool.ts
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          package_json_file: ./validation_tool.ts/package.json

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          cache: "pnpm"
          cache-dependency-path: ./validation_tool.ts/package.json

      - name: Node.js | Install dependencies
        run: pnpm install

      - name: Node.js | Run build, lint, and tests
        run: |
          pnpm build
          pnpm typecheck
          pnpm test

      - name: Report Node.js test results
        if: success() || failure()
        uses: dorny/test-reporter@v2
        with:
          name: Node.js Test Results
          path: "./validation_tool.ts/junit.xml"
          reporter: "jest-junit"
          fail-on-error: true